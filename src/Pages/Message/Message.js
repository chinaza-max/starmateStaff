import React from 'react'
import AppBar from '@mui/material/AppBar'
import Box from '@mui/material/Box'
import CssBaseline from '@mui/material/CssBaseline'
import Toolbar from '@mui/material/Toolbar'
import Typography from '@mui/material/Typography'
import IconButton from '@mui/material/IconButton'
import Paper from '@mui/material/Paper'
import List from '@mui/material/List'
import ListItem from '@mui/material/ListItem'
import ListItemAvatar from '@mui/material/ListItemAvatar'
import ListItemText from '@mui/material/ListItemText'
import ListSubheader from '@mui/material/ListSubheader'
import Avatar from '@mui/material/Avatar'
import NavigateBeforeIcon from '@mui/icons-material/NavigateBefore'
import { useNavigate } from 'react-router-dom'
import img from '../../Assets/5.jpg'
import DeleteOutlineIcon from '@mui/icons-material/DeleteOutline'
import './Message.css'
import Swal from 'sweetalert2'

const messages = [
  {
    id: 1,
    primary: 'Brunch this week?',
    secondary: "to day I'll be in the neighbourhood this week. Let's grab a bite to eat",
    date: '10/31/2023',
    person: img
  },
  {
    id: 2,
    primary: 'Birthday Gift',
    secondary: `yersterday Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    date: '10/30/2023',
    person: img
  },
  {
    id: 3,
    primary: 'Recipe to try',
    secondary: 'today I am try out this new BBQ recipe, I think this might be amazing',
    date: '10/31/2023',
    person: '/static/images/avatar/2.jpg'
  },
  {
    id: 4,
    primary: 'Yes!',
    secondary: 'back I have the tickets to the ReactConf for this year.',
    date: '09/02/2020',
    person: '/static/images/avatar/3.jpg'
  },
  {
    id: 5,
    primary: "Doctor's Appointment",
    secondary: 'back My appointment for the doctor was rescheduled for next Saturday.',
    date: '09/02/2020',
    person: '/static/images/avatar/4.jpg'
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `back  Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    date: '09/02/2020',
    person: '/static/images/avatar/5.jpg'
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `back  Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    date: '09/02/2020',

    person: img
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `back  Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    date: '09/02/2020',
    person: '/static/images/avatar/5.jpg'
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `back  Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    date: '09/02/2020',

    person: img
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `back  Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    date: '09/02/2020',
    person: '/static/images/avatar/5.jpg'
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `back  Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    date: '09/02/2020',

    person: img
  }
]

export default function Message() {
  const navigate = useNavigate()

  function formatDateInWords(inputDate) {
    const options = { year: 'numeric', month: 'long', day: 'numeric' }
    const dateParts = new Date(inputDate).toLocaleDateString('en-US', options).split(' ')

    const day = dateParts[1]
    const month = dateParts[0]
    const year = dateParts[2]

    // Merge the date parts into a single string
    const mergedDate = `${month} ${day} ${year}`

    return mergedDate
  }

  function isDateToday(inputDate) {
    const today = new Date()
    const dateToCheck = new Date(inputDate)

    return (
      dateToCheck.getDate() === today.getDate() &&
      dateToCheck.getMonth() === today.getMonth() &&
      dateToCheck.getFullYear() === today.getFullYear()
    )
  }

  function isDateYesterday(inputDate) {
    const yesterday = new Date()
    yesterday.setDate(yesterday.getDate() - 1)
    return (
      inputDate.getDate() === yesterday.getDate() &&
      inputDate.getMonth() === yesterday.getMonth() &&
      inputDate.getFullYear() === yesterday.getFullYear()
    )
  }

  function isDateBeforeYesterday(inputDate) {
    const today = new Date()
    today.setHours(0, 0, 0, 0) // Set time to the beginning of the day
    const yesterday = new Date(today)
    yesterday.setDate(today.getDate() - 1)

    const dateToCheck = new Date(inputDate)
    dateToCheck.setHours(0, 0, 0, 0) // Set time to the beginning of the day

    return dateToCheck < yesterday
  }

  const onClear = () => {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire('Deleted!', 'Your file has been deleted.', 'success')
      }
    })
  }

  const onDeleted = () => {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire('Deleted!', 'Your file has been deleted.', 'success')
      }
    })
  }

  const goBack = () => {
    navigate(-1)
  }

  return (
    <div className='Message'>
      <React.Fragment>
        <CssBaseline />
        <Paper square sx={{ pb: '50px' }}>
          <Typography variant='p' gutterBottom component='div' sx={{ p: 2, pb: 0, display: 'flex', gap: 1.5, '& > h5': { flex: 1 } }}>
            <Typography variant='h5'>Inbox</Typography>
            <Typography onClick={onClear} variant='h5' sx={{ textAlign: 'right', color: '#e43e3e' }}>
              Clear
            </Typography>
          </Typography>
          <List sx={{ mb: 2 }}>
            {messages.map(({ id, primary, secondary, person, date }) => (
              <React.Fragment key={id}>
                {isDateToday(new Date(date)) === true && <ListSubheader sx={{ bgcolor: 'background.paper' }}>Today</ListSubheader>}

                {isDateYesterday(new Date(date)) === true && <ListSubheader sx={{ bgcolor: 'background.paper' }}>Yesterday</ListSubheader>}

                {isDateBeforeYesterday(new Date(date)) === true && (
                  <ListSubheader sx={{ bgcolor: 'background.paper' }}>{formatDateInWords(new Date(date))}</ListSubheader>
                )}

                <ListItem button>
                  <ListItemAvatar>
                    <Avatar alt='Profile Picture' src={person} />
                  </ListItemAvatar>
                  <ListItemText primary={primary} secondary={secondary} />

                  <span onClick={onDeleted} className='DeleteOutlineIcon'>
                    <DeleteOutlineIcon />
                  </span>
                </ListItem>
              </React.Fragment>
            ))}
          </List>
        </Paper>
        <AppBar position='fixed' color='primary' sx={{ top: 'auto', bottom: 0 }}>
          <Toolbar>
            <IconButton onClick={goBack} color='inherit' aria-label='open drawer'>
              <NavigateBeforeIcon />
            </IconButton>

            <Box sx={{ flexGrow: 1 }} />
          </Toolbar>
        </AppBar>
      </React.Fragment>
    </div>
  )
}
