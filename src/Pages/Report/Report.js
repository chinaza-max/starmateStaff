import React,{useEffect,useState,useRef} from 'react'
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import CssBaseline from '@mui/material/CssBaseline';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import Paper from '@mui/material/Paper';
import NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';
import { useNavigate  } from "react-router-dom";
import img from "../../Assets/5.jpg";
import Swal from 'sweetalert2'
import randomstring from  "randomstring";
import MediaController from "../../Components/MediaController/MediaController";
import RadialMenu from "../../Components/RadialMenu/RadialMenu"
import ListSubheader from '@mui/material/ListSubheader';
import "./Report.css";






import {
  TextField,
  Button,
  Grid,
  Avatar,
} from "@mui/material";

import SendIcon from "@mui/icons-material/Send";



const messages = [
  {
    id: 1,
    primary: 'Brunch this week?',
    secondary: "to day I'll be in the neighbourhood this week. Let's grab a bite to eat",
    date: "10/31/2023",
    person:img,
  },
  {
    id: 2,
    primary: 'Birthday Gift',
    secondary: `yersterday Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    date: "10/30/2023",
    person: img,
  },
  {
    id: 3,
    primary: 'Recipe to try',
    secondary: 'today I am try out this new BBQ recipe, I think this might be amazing',
    date: "10/31/2023",
    person: '/static/images/avatar/2.jpg',
  },
  {
    id: 4,
    primary: 'Yes!',
    secondary: 'back I have the tickets to the ReactConf for this year.',
    date: "09/02/2020",
    person: '/static/images/avatar/3.jpg',
  },
  {
    id: 5,
    primary: "Doctor's Appointment",
    secondary: 'back My appointment for the doctor was rescheduled for next Saturday.',
    date: "09/02/2020",
    person: '/static/images/avatar/4.jpg',
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `back  Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    date: "09/02/2020",
    person: '/static/images/avatar/5.jpg',
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `back  Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    date: "09/02/2020",

    person: img,
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `back  Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    date: "09/02/2020",
    person: '/static/images/avatar/5.jpg',
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `back  Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    date: "09/02/2020",

    person: img,
  },{
    id: 6,
    primary: 'Discussion',
    secondary: `back  Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    date: "09/02/2020",
    person: '/static/images/avatar/5.jpg',
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `back  Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    date: "09/02/2020",

    person: img,
  },
];







export default function Message() {
  const [input, setInput] = useState("");
  const [isRecording, setIsRecording] = useState(false);
  const scrollBoxRef = useRef(null);
  const fileInputRef = useRef(null);
  const [open, setOpen] = useState(false);
  const videoRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const chunksRef = useRef([]);
  const inputRef = useRef(null);

  const navigate=useNavigate()

  const goBack=()=>{
    navigate(-1)
  }

  const handleIconClick = () => {
    fileInputRef.current.click();
  };


  const [chats, setChats] = useState([
    { id: 1, text: "Hi there!", sender: "bot",type: "text" },
    { id: 2, text: "Hello!", sender: "user",type: "text"  },
    { id: 3, text: "How can I assist you today?", sender: "bot",type: "text"  },
    { id: 4, text: "Hello!", sender: "user",type: "text"  },
    { id: 5, text: "How can I assist you today?", sender: "bot",type: "text"  },
  ]);

  const scrollToBottom = () => {
    if (scrollBoxRef.current) {
      const scrollHeight = scrollBoxRef.current.scrollHeight;
      scrollBoxRef.current.scrollTop = scrollHeight;
    }
  }


  const handleSend = () => {

    if (input.trim() !== "") {
      let i= randomstring.generate({
        length: 5,
        charset: 'alphabetic'
      });
      setChats([...chats,{ id: i, text: input, sender: "bot",type: "text" }])
      setInput("");

      inputRef.current.focus();


    }


  };

  const handleInputChange = (event) => {
    setInput(event.target.value);
  };

  const startRecordingHandler = () => {

    const startRecording = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        videoRef.current.srcObject = stream;
        mediaRecorderRef.current = new MediaRecorder(stream);

        mediaRecorderRef.current.ondataavailable = (e) => {
          if (e.data.size > 0) {
            chunksRef.current.push(e.data);
          }
        };
      } catch (error) {
        console.error('Error accessing camera:', error);
      }
    };

    startRecording();

    chunksRef.current = [];
    mediaRecorderRef.current.start();
  };

  const isRecordingHndle = (value) => {
    setIsRecording(value)
  };

  

  function handlefileUplaod(event) {
    const selectedFile = event.target.files[0];

    if(selectedFile.type.split("/").includes("image")){
      if (selectedFile) {
        const reader = new FileReader();
        reader.onload = function (e) {
          Swal.fire({
            imageUrl: `${ e.target.result}`,
            imageWidth: 400,
            imageHeight: "auto",
            imageAlt: 'Custom image',
            confirmButtonColor: 'green',
            confirmButtonText: 'upload',
            cancelButtonText: 'Cancel',
            showCancelButton: true,
          }).then((result) => {
            if (result.isConfirmed) {

              let i= randomstring.generate({
                length: 5,
                charset: 'alphabetic'
              });


              setChats([...chats,{ id: i, url:e.target.result, sender: "bot",type: "image"}])
            
            }
          })
        }
        reader.readAsDataURL(selectedFile);
      }
    }
    else if(selectedFile.type.split("/").includes("video")){
      const reader = new FileReader();
      reader.onload = function (e) {

        const videoURL = URL.createObjectURL(selectedFile);
        Swal.fire({
          html:
    `<iframe  width="auto"  src="${videoURL}" frameborder="0" autoPlay="false"  allowfullscreen></iframe>`,
          confirmButtonColor: 'green',
          confirmButtonText: 'upload',
          cancelButtonText: 'Cancel',
          customClass: 'custom-swal',
          showCancelButton: true,
        }).then((result) => {
          if (result.isConfirmed) {
            let i= randomstring.generate({
              length: 5,
              charset: 'alphabetic'
            });
            setChats([...chats,{ id: i, url:videoURL, sender: "bot",type: "video"}])
            
          }
        })
      }
      reader.readAsDataURL(selectedFile);
    }
    else{
      Swal.fire({
        icon: 'info',
        html:
          'File type not supported  ' ,
        showCloseButton: true,
        showCancelButton: true,
        showConfirmButton: false,
        focusConfirm: false,
        
      })
    }


    /*
    else if(selectedFile.type.split("/").includes("pdf")){
      const reader = new FileReader();
      reader.onload = function (e) {


        console.log("pdf pdf pdf pdf pdf ")
        const videoURL = URL.createObjectURL(selectedFile);
        Swal.fire({
          html:
    `<iframe width="auto" height="315" src="${e.target.result}" ></iframe>`,
          confirmButtonColor: 'green',
          confirmButtonText: 'upload',
          cancelButtonText: 'Cancel',
          showCancelButton: true,
        }).then((result) => {
          if (result.isConfirmed) {
            let i=9
            setChats([...chats,{ id: i, url:videoURL, sender: "bot",type: "video"}])
            i++
          }
        })
      }
      reader.readAsDataURL(selectedFile);
    }
*/
    event.target.value = ""; 
 
  }



  useEffect(()=>{
    scrollToBottom()

  },[chats,open])

  
  return (
    <div className='Report'>
    <React.Fragment>
      <CssBaseline />

        <ListSubheader sx={{ bgcolor: 'background.paper' }}>
            

            <Box
                    sx={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    p: 1,
                    m: 1,
                    bgcolor: 'background.paper',
                    borderRadius: 1,
                    }}
                >
                    
                        <IconButton  onClick={goBack} color="inherit" aria-label="open drawer" sx={{ mt:2 }}>
                            <NavigateBeforeIcon  />
                        </IconButton>
                        <Typography variant="button" display="block" gutterBottom   sx={{ mt:2 }}>
                            Big joe
                        </Typography>
                        
                </Box>

                
        </ListSubheader>
          <div className='Report'>
      {
        isRecording===true?
        <div className='video'>
            <video ref={videoRef} autoPlay playsInline muted />
            <MediaController/>
        </div>
          :''
      }
      <input
        type="file"
        style={{ display: 'none' }}
        ref={fileInputRef}
        onChange={handlefileUplaod}
      />


      <div className='ReportContainer'>
        <Box   
        sx={{
          height: "100vh",
          display: "flex",
          flexDirection: "column",
          bgcolor: "grey.200",
        }}>

          <Box className="scrollBoxRef"  ref={scrollBoxRef} sx={{ flexGrow: 1, overflow: "auto", p: 2 }}>
            {chats.map((message) => (
              <Message2 key={message.id} message={message} />
            ))}
          </Box>
      
        </Box>
      </div>
          </div>
      

      <div className='bottom'>
        <AppBar position="fixed" color="primary" sx={{ top: 'auto', bottom: 0 }}>
          <Toolbar>
              <Box className='inputSection' sx={{ p: 2}} color="primary">
              <Grid container spacing={2}  >
                <Grid item xs={2}>
                  <div className='fileIcon' onClick={()=>{setOpen((value)=>!value)}}>
                    <RadialMenu isRecordingHndleP={isRecordingHndle} startRecordingHandlerP={startRecordingHandler} handleIconClickP={handleIconClick}  openP={open}/>
                  </div>
                </Grid>
                <Grid item xs={8}>
                  <TextField
                    size="small"
                    fullWidth
                    placeholder="Typed a message"
                    variant="outlined"
                    value={input}
                    inputRef={inputRef}
                    onChange={handleInputChange}
                  />
                </Grid>
                
                <Grid item xs={2}>
                  <Button
                    fullWidth
                    color="primary"
                    variant="contained"
                    endIcon={<SendIcon />}
                    onClick={handleSend}
                  >
                    Send
                  </Button>
                </Grid>
              </Grid>
            </Box>
            
            <Box sx={{ flexGrow: 1 }} />
            
          </Toolbar>
        </AppBar>
      </div>
     


    </React.Fragment>
    </div>
  )
}










const Message2 = ({ message }) => {

  const viewImage = (event) => {
    const clickedImageSrc = event.target.src;
    Swal.fire({
      imageUrl: `${clickedImageSrc}`,
      imageWidth: 400,
      imageHeight: "auto",
      imageAlt: 'Custom image',
      confirmButtonColor: 'green',
      confirmButtonText: 'ok',
    })
  }
  const isBot = message.sender === "bot";
  const type = message.type

  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: isBot ? "flex-start" : "flex-end",
        mb: 2,
      }}
    >
      <Box
        sx={{
          display: "flex",
          flexDirection: isBot ? "row" : "row-reverse",
          alignItems: "center",
        }}
      >
        <Avatar sx={{ bgcolor: isBot ? "primary.main" : "secondary.main" }}>
          {isBot ? "B" : "U"}
        </Avatar>
        <Paper
          variant="outlined"
          sx={{
            p: 2,
            ml: isBot ? 1 : 0,
            mr: isBot ? 0 : 1,
            backgroundColor: isBot ? "primary.light" : "secondary.light",
            borderRadius: isBot ? "20px 20px 20px 5px" : "20px 20px 5px 20px",
          }}
        >
          {
            type==='text'?
              <Typography variant="body1">{message.text}</Typography>
                :
              type==='image'?       
                <div className="imageContainer">
                  <img  onClick={(event)=>viewImage(event)} src={message.url} alt="report file"/>
                </div>       
                :
                type==='video'?  
                  <div className="videoContainer">
                      <video controls={true} >
                        <source src={message.url} type="video/mp4" />
                      </video>
                  </div>  
                 :
                  <div className="imageContainer">
                    <iframe src={message.url}
                      title="image"
                      ></iframe>
                  </div>       

          }
        </Paper>
      </Box>
    </Box>
  );
};